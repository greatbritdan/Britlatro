[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "SC = Card(G.ROOM.T.w/2 - SC_scale*G.CARD_W/2, 10. + G.ROOM.T.h/2 - SC_scale*G.CARD_H/2, SC_scale*G.CARD_W, SC_scale*G.CARD_H, G.P_CARDS.empty, G.P_CENTERS['j_joker'])"
position = "at"
payload = "SC = Card(G.ROOM.T.w/2 - SC_scale*G.CARD_W/2, 10. + G.ROOM.T.h/2 - SC_scale*G.CARD_H/2, SC_scale*G.CARD_W, SC_scale*G.CARD_H, G.P_CARDS.empty, G.P_CENTERS['j_brit_britdan'])"
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "for i = 1, 2 do"
position = "at"
payload = "for i = 1, G.GAME.modifiers.booster_packs or 2 do"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''local card = Card(0,0, 0.5*G.CARD_W, 0.5*G.CARD_H, G.P_CARDS[v[1]], G.P_CENTERS.c_base)'''
position = "at"
payload = '''local card = Card(0,0, 0.5*G.CARD_W, 0.5*G.CARD_H, G.P_CARDS[v[1]], G.P_CENTERS[v[3] or 'c_base'])'''
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "elseif v.id == 'no_shop_jokers' then"
position = "before"
payload = '''
elseif v.id == 'no_shop_purchases' then
    change_shop_size(-2)
    self.GAME.modifiers[v.id] = true
elseif v.id == 'boosters_in_shop' then
    G.GAME.joker_rate = 4
    G.GAME.tarot_rate = 4
    G.GAME.planet_rate = 4
    G.GAME.tagcard_rate = 4
    G.GAME.playing_card_rate = 4
    G.GAME.spectral_rate = 4
    G.GAME.booster_rate = 4
    self.GAME.modifiers[v.id] = true
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "reset_idol_card()"
position = "before"
payload = '''
reset_slotmachine_card()
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "reset_idol_card()"
position = "before"
payload = '''
reset_slotmachine_card()
G.GAME.current_round.brit_used_tags = {}
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "discover_card(G.P_TAGS[_tag.key])"
position = "after"
payload = '''
if BRIT_VALID_TAGS[_tag.key] == 1 then
    if not G.GAME.current_round.brit_used_tags[_tag.key] then
        G.GAME.current_round.brit_used_tags[_tag.key] = 0
    end
    G.GAME.current_round.brit_used_tags[_tag.key] = G.GAME.current_round.brit_used_tags[_tag.key] + 1
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "if type == 'Small' then"
position = "at"
payload = "if type == 'Small' and (not G.GAME.modifiers.no_blind_skips) then"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "elseif type == 'Big' then"
position = "at"
payload = "elseif type == 'Big' and (not G.GAME.modifiers.no_blind_skips) then"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "elseif not run_info then"
position = "before"
payload = '''
elseif (type == 'Small' or type == 'Big') and G.GAME.modifiers.no_blind_skips then
    extras = {n=G.UIT.R, config={align = "cm"}, nodes={}}
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''G.FUNCS.can_reroll = function(e)'''
position = "after"
payload = '''
if G.GAME.modifiers.no_blind_skips then
	e.config.colour = G.C.UI.BACKGROUND_INACTIVE
    e.config.button = nil
    return
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "G.GAME.spectral_rate = G.GAME.spectral_rate or 0"
position = "after"
payload = "G.GAME.booster_rate = G.GAME.booster_rate or 0"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "local total_rate = G.GAME.joker_rate + G.GAME.playing_card_rate"
position = "after"
payload = "local total_rate = G.GAME.joker_rate + G.GAME.playing_card_rate + G.GAME.booster_rate"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "for _, v in ipairs(rates) do"
position = "before"
payload = '''
table.insert(rates, {type = 'Booster', val = G.GAME.booster_rate})
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if card.ability.consumeable and not skip_materialize then card:start_materialize() end"
position = "after"
payload = '''
if _type == 'Booster' then
    card.T.w = card.T.w*1.27
    card.T.h = card.T.h*1.27
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = 'if center.name == "Wee Joker" and (center.discovered or self.bypass_discovery_center) then'
position = "before"
payload = '''
if center.name == "j_brit_jimbobooster" and (center.discovered or self.bypass_discovery_center) then 
    W = W*1.27
    H = H*1.27
    self.T.w = W
    self.T.h = H
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = 'elseif self.config.center.name == "Wee Joker" then'
position = "before"
payload = '''
elseif self.config.center.name == "j_brit_jimbobooster" then 
    self.T.h = H*scale*1.27*scale
    self.T.w = W*scale*1.27*scale
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:redeem()"
position = "after"
payload = '''
G.GAME.current_round.vouchers_used = (G.GAME.current_round.vouchers_used or 0) + 1
print("Voucher'd",G.GAME.current_round.vouchers_used)
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "G.GAME.used_vouchers[v.id] = true"
position = "after"
payload = "G.GAME.current_round.vouchers_used = (G.GAME.current_round.vouchers_used or 0) + 1"
match_indent = true

[[patches]]
[patches.pattern]
target = "back.lua"
pattern = "G.GAME.used_vouchers[self.effect.config.voucher] = true"
position = "after"
payload = "G.GAME.current_round.vouchers_used = (G.GAME.current_round.vouchers_used or 0) + 1"
match_indent = true

[[patches]]
[patches.pattern]
target = "back.lua"
pattern = "G.GAME.used_vouchers[v ] = true"
position = "after"
payload = "G.GAME.current_round.vouchers_used = (G.GAME.current_round.vouchers_used or 0) + 1"
match_indent = true